// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  firstName    String
  lastName     String
  birthDay     DateTime?   @db.Date
  email        String      @unique
  phoneNumber  Int?
  address      String?
  postalCode   String?
  city         String?
  gender       String?
  role         String?
  password     String
  students     Students?
  owner        Owner?
  ratings      Rating[]
  payments     Payment[]
}

model Students {
  id              Int               @id @default(autoincrement())
  user            User              @relation(fields: [userId], references: [id])
  userId          Int               @unique
  Dossier         Dossier?
  likedByStudents LikedByStudents[]
  signatures      Signatures[]      @relation("StudentToSignature")
  Payment         Payment[]
}

model Owner {
  id         Int          @id @default(autoincrement())
  user       User         @relation(fields: [userId], references: [id])
  userId     Int          @unique
  ownerAnimalAcceptance Boolean
  ownerSmokeAcceptance Boolean
  ratings    Rating[]
  signatures Signatures[] @relation("OwnerToSignature")
  documents   Documents[]
}

model Dossier {
  id          Int         @id @default(autoincrement())
  dateDossier DateTime
  validation  Boolean?
  Students    Students    @relation(fields: [dossierId], references: [id])
  dossierId   Int         @unique
  documents   Documents[]
  schoolName String
  schoolStatus String
  warrantyPeople Boolean
  visaleDocument String?
  hasPets Boolean
  smokingHabit String
  preferredHousing String
  hobbiesAndInterests String?
  housingType String
  searchType String
  budget Int
}

model Documents {
  id               Int          @id @default(autoincrement())
  libelle          String
  type             String
  filePath         String
  publicationDate  DateTime
  modificationDate DateTime
  dossier          Dossier?     @relation(fields: [dossierId], references: [id])
  dossierId        Int?
  Signatures       Signatures[]
  owner            Owner? @relation(fields: [ownerId], references: [id])
  ownerId          Int?
}

model LikedByStudents {
  id        Int      @id @default(autoincrement())
  student   Students @relation(fields: [studentId], references: [id])
  studentId Int
  house     House    @relation(fields: [houseId], references: [id])
  houseId   Int
  likes     Boolean
}

model House {
  id                 Int               @id @default(autoincrement())
  address            String
  postalCode         Int
  city               String
  type               String
  constructionDate   DateTime
  totalAreaSize      Int
  likedByStudents    LikedByStudents[]
  payments           Payment?
  publication        HousePublication?
  principalRooms     PrincipalRooms?
  rooms              Rooms?
  kitchen            Kitchen?
  bathrooms          Bathrooms?
  garage             Garage?
  storageRoom        StorageRoom?
  paymentId          Int
  housePublicationId Int
}

model PrincipalRooms {
  id      Int    @id @default(autoincrement())
  surface Int
  house   House? @relation(fields: [houseId], references: [id])
  houseId Int?   @unique
}

model Rooms {
  id      Int    @id @default(autoincrement())
  surface Int
  house   House? @relation(fields: [houseId], references: [id])
  houseId Int?   @unique
}

model Kitchen {
  id               Int     @id @default(autoincrement())
  surface          Int
  refrigerator     Boolean
  bakingOven       Boolean
  sink             Boolean
  bakingTray       Boolean
  heatingType      String
  waterHeatingType String
  suggestedFor     String
  rentPrice        Int
  otherFees        Int
  rentPriceTTC     Int
  house            House?  @relation(fields: [houseId], references: [id])
  houseId          Int?    @unique
}

model Bathrooms {
  id             Int     @id @default(autoincrement())
  surface        Int
  type           String
  washingMachine Boolean
  dryingMachine  Boolean
  house          House?  @relation(fields: [houseId], references: [id])
  houseId        Int?    @unique
}

model Garage {
  id      Int    @id @default(autoincrement())
  surface Int
  house   House? @relation(fields: [houseId], references: [id])
  houseId Int?   @unique
}

model StorageRoom {
  id      Int    @id @default(autoincrement())
  surface Int
  house   House? @relation(fields: [houseId], references: [id])
  houseId Int?   @unique
}

model Rating {
  id       Int    @id @default(autoincrement())
  author   User   @relation(fields: [authorId], references: [id])
  authorId Int
  rating   Int
  comments String
  owner    Owner? @relation(fields: [ownerId], references: [id])
  ownerId  Int?
}

model HousePublication {
  id      Int     @id @default(autoincrement())
  house   House   @relation(fields: [houseId], references: [id])
  houseId Int     @unique
  premium Boolean
}

model Payment {
  id          Int       @id @default(autoincrement())
  paymentDate DateTime
  status      Boolean
  house       House    @relation(fields: [houseId], references: [id])
  houseId     Int      @unique 
  User        User     @relation(fields: [userId], references: [id])
  userId      Int       @unique
  Students    Students @relation(fields: [studentsId], references: [id])
  studentsId  Int       @unique
}

model Signatures {
  id            Int       @id @default(autoincrement())
  signatureDate DateTime
  status        Boolean
  studentId     Int
  document      Documents @relation(fields: [documentId], references: [id])
  documentId    Int
  students      Students @relation("StudentToSignature", fields: [studentsId], references: [id])
  studentsId    Int
  owner         Owner     @relation("OwnerToSignature", fields: [ownerId], references: [id])
  ownerId       Int
}




